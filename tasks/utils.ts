import { exec as _exec, execSync } from 'child_process';
import * as fs from 'fs';
import { ncp as _ncp } from 'ncp';
import { promisify } from 'util';

export const exec = promisify(_exec);

export function ncp(
  src: string,
  dest: string,
  options: { filter?: (name: string) => boolean } = {},
) {
  return new Promise((res, error) => {
    _ncp(src, dest, options, err => {
      if (err) error(err);
      res();
    });
  });
}

export function alterPackageFile(text: string, depth: number) {
  const json: { [key: string]: string } = JSON.parse(text);
  delete json.engines;
  delete json.scripts;
  delete json.devDependencies;
  return JSON.stringify(json);
}

export function copyPackageFilesToBuild() {
  return ncp('./src', './build', {
    filter: filename => {
      const pieces = filename.split('/');
      const last = pieces[pieces.length - 1];
      return !last.match(/\./) || last === 'package.json';
    },
  });
}

export async function build(args: { declarationPath: string; rollupCommands: string[] }) {
  // need to execute these builds serially because the
  // umd build relies on the types generated by the esm build
  execSync('rm -rf build && rm -rf .rpt2_cache');

  console.log('building packages with rollup');

  await Promise.all(args.rollupCommands.map(task => exec(task)));

  console.log('copying declaration files to build folder');

  await ncp(args.declarationPath, './build');

  execSync('rm -rf .rpt2_cache ./build/es2015/packages ./build/umd/packages');

  console.log('copying other package files to build folder');

  fs.copyFileSync('./README.md', './build/README.md');

  const file = fs.readFileSync('./package.json', { encoding: 'utf8' });

  fs.writeFileSync('./build/package.json', alterPackageFile(file, 0), { encoding: 'utf8' });

  await copyPackageFilesToBuild();

  console.log('formatting code with prettier');

  await exec(`yarn prettier --write './build/**/*.md' './build/**/*.json' './build/**/*.js'`);

  await exec(`yarn prettier-tslint fix './build/**/*.ts'`);
}
